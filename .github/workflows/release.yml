name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGES=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)
        else
          CHANGES=$(git log --pretty=format:"- %s" HEAD)
        fi
        
        # Create changelog file
        cat > CHANGELOG.md << EOF
        ## Changes in ${{ steps.get_version.outputs.tag_name }}
        
        ${CHANGES}
        
        ## Installation
        
        Download the appropriate binary for your platform from the assets below.
        
        ### Linux/macOS
        \`\`\`bash
        # Download binary
        curl -L -o k8s-memory-watch https://github.com/eduardoferro/k8s-memory-watch/releases/download/${{ steps.get_version.outputs.tag_name }}/k8s-memory-watch-linux-amd64
        chmod +x k8s-memory-watch
        sudo mv k8s-memory-watch /usr/local/bin/
        \`\`\`
        
        ### Windows
        Download \`k8s-memory-watch-windows-amd64.exe\` and add it to your PATH.
        EOF

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: Release ${{ steps.get_version.outputs.tag_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  build-and-upload:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            asset_name: k8s-memory-watch-linux-amd64
          - goos: linux
            goarch: arm64
            asset_name: k8s-memory-watch-linux-arm64
          - goos: darwin
            goarch: amd64
            asset_name: k8s-memory-watch-darwin-amd64
          - goos: darwin
            goarch: arm64
            asset_name: k8s-memory-watch-darwin-arm64
          - goos: windows
            goarch: amd64
            asset_name: k8s-memory-watch-windows-amd64.exe

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.2'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ needs.create-release.outputs.tag_name }}
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        go build \
          -ldflags "-s -w -X main.Version=${VERSION} -X main.Commit=${COMMIT} -X main.BuildTime=${BUILD_TIME}" \
          -o ${{ matrix.asset_name }} \
          ./cmd/k8s-memory-watch

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  create-checksums:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts from release
      run: |
        # Create a directory for all release assets
        mkdir -p release-assets
        
        # Download all release assets
        RELEASE_ID=$(curl -s "https://api.github.com/repos/eduardoferro/k8s-memory-watch/releases/tags/${{ needs.create-release.outputs.tag_name }}" | jq -r '.id')
        
        curl -s "https://api.github.com/repos/eduardoferro/k8s-memory-watch/releases/${RELEASE_ID}/assets" \
          | jq -r '.[] | select(.name | test("^k8s-memory-watch-")) | .browser_download_url' \
          | while read url; do
              wget -P release-assets "$url"
            done

    - name: Generate checksums
      run: |
        cd release-assets
        sha256sum * > SHA256SUMS
        cat SHA256SUMS

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release-assets/SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain
