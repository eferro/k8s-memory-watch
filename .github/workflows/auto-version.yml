name: Auto Version

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write

jobs:
  auto-version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-release]')"
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: get_latest_tag
      run: |
        # Get the latest tag, or default to v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "Latest tag: ${LATEST_TAG}"

    - name: Determine version bump type
      id: determine_bump
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUMP_TYPE="${{ github.event.inputs.version_type }}"
        else
          # Analyze commit messages to determine bump type
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          # Handle case when no tags exist yet
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # For first release, get all commits from beginning
            COMMITS=$(git log --pretty=format:"%s")
          else
            # Get commits since last tag
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
          fi
          
          if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:|BREAKING CHANGE:|^[a-z]+(\(.+\))?!:"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
            BUMP_TYPE="minor"
          elif echo "$COMMITS" | grep -qE "^(fix|bug|patch|chore|docs|style|refactor|perf|test)(\(.+\))?:"; then
            BUMP_TYPE="patch"
          else
            echo "No conventional commits found, skipping release"
            exit 0
          fi
        fi
        
        echo "bump_type=${BUMP_TYPE}" >> $GITHUB_OUTPUT
        echo "Bump type determined: ${BUMP_TYPE}"

    - name: Calculate new version
      id: calc_version
      run: |
        LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
        BUMP_TYPE="${{ steps.determine_bump.outputs.bump_type }}"
        
        # Remove 'v' prefix for calculation
        VERSION=${LATEST_TAG#v}
        
        # Split version into parts
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Bump version based on type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "New version: ${NEW_VERSION}"

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Create tag
        git tag -a "${NEW_VERSION}" -m "Release ${NEW_VERSION}"
        
        # Push tag
        git push origin "${NEW_VERSION}"
        
        echo "Created and pushed tag: ${NEW_VERSION}"
